import db from"../data/product-base.json"assert{type:"json"};const getRandomInt=(t,e)=>(t=Math.ceil(t),e=Math.floor(e+1),Math.floor(Math.random()*(e-t))+t),getRandomArray=(t,e,r)=>{let i,s=[];for(;s.length<r;)i=getRandomInt(t,e),-1==s.indexOf(i)&&s.push(i);return s},nextBtn=document.querySelector("#next"),resultsBtn=document.querySelector("#resultsBtn"),counter=document.querySelector(".counter"),experiment=document.querySelector("#experiment"),results=document.querySelector("#results"),warehouseList=document.querySelector("#warehouse-list"),ordersList=document.querySelector("#orders-list"),departuresList=document.querySelector("#departures-list"),expectedList=document.querySelector("#expected-list"),statList=document.querySelector("#stat-list"),history=document.querySelector("#history"),historyBlock=document.querySelector(".history__block"),historyTitle=document.querySelector(".history__title"),historyItem=document.querySelector(".history__item"),currentDay=document.querySelector("#currentDay"),allDays=document.querySelector("#allDays");history.append(historyItem.cloneNode(!0));const form=document.querySelector("#form"),clearUI=t=>{for(;t.firstChild;)t.firstChild.remove()};clearUI(history);const drawTable=(t,e)=>{clearUI(t),console.log(e),e.map((t=>{let e=document.createElement("li");e.classList.add("table__line","table__item");for(let r in t){let i=document.createElement("span");i.innerText=t[r],e.append(i)}return e})).forEach((e=>t.append(e)))},drawSpan=(t,e)=>{t.innerText=e},updateUI=t=>{drawTable(ordersList,t.getOrderList()),drawTable(warehouseList,t.getProducts()),drawTable(departuresList,t.getDepartures()),drawTable(expectedList,t.getExpectedDeliveries()),drawTable(statList,t.getShortStat())},updateCounter=(t,e)=>{currentDay.innerText=t,allDays.innerText=e},drawHistory=t=>{clearUI(history);const e=document.createElement("ul");e.classList.add("history__list","table__list");const r=document.createElement("div");r.classList.add("flex"),t.forEach((t=>{console.log(t);let i=historyBlock.cloneNode(),s=historyItem.cloneNode(!0),o=e.cloneNode(),d=r.cloneNode();const a=historyTitle.cloneNode();a.innerText=`День ${t.day}`,drawTable(o,t.stat),s.append(o),d.append(s),i.append(a),i.append(d),history.append(i)}))};function Order(t,e){this.id=t,this.amount=e}class Provider{#t=[];newOrder=t=>{this.#t=[...this.#t,{order:t,leadTime:getRandomInt(1,5)}]};sendOrder=t=>{this.#t=this.#t.map((t=>({...t,leadTime:t.leadTime-1})));const e=this.#t.filter((t=>0==t.leadTime));this.#t=this.#t.filter((t=>t.leadTime>0)),e.map((e=>t.getOrder(e.order)))}}class Retailer{#e;#r;constructor({provider:t,id:e}){this.#e=t,this.#r=e}getId=()=>this.#r;makeOrder=t=>{this.#e.newOrder(this,t)}}let products=db.products;const getProductbyId=t=>products.find((e=>e.id==t));class ProductsBase{#i;constructor(t){this.#i=t}getProductbyId=t=>this.#i.find((e=>e.id==t))}class Statistic{list}class StatisticDay{day;statisticsList}function StatisticItem(t){this.id=t,this.orderAmount=0,this.departuresAmount=0,this.lossesAmount=0,this.totalCost=0,this.profitCost=0,this.totalLosses=0}class Store{#i;#s;#o;#d=1.2;#e;#a=0;#n=0;#c;#u=0;#l=[];#h;#p;#m=[];constructor(t,e){this.#s=new ProductsBase(t.products),this.#o=t.config,this.#i=t.initialStore.map((t=>{let{initialPrice:e}=this.#s.getProductbyId(t.id);return{...t,initialPrice:e,profit:Math.round(100*(this.#d-1)),sale:"-",price:Math.round(e*this.#d)}})),this.#e=e,this.#h=this.#i,this.#p=this.#t,this.#l=t.products.map((t=>new StatisticItem(t.id))),console.log(this.#l)}#t=[];#y=[];getOrder=t=>{const{id:e,initialPrice:r,expiryDate:i}=this.#s.getProductbyId(t.id);this.#i=[...this.#i,{id:e,amount:t.amount,expiryDate:i,initialPrice:r,profit:Math.round(100*(this.#d-1)),sale:"-",price:Math.round(r*this.#d)}],this.#g=this.#g.map((r=>r.id==e?{...r,amount:r.amount-t.amount}:r)).filter((t=>t.amount>0))};newOrder=(t,e)=>{this.#t=[...this.#t,{retailer:t,order:e}]};newDay=()=>{this.#h=this.#i,this.#p=this.#t,this.#y=[],this.#a=0,this.#n=0,this.#l=db.products.map((t=>new StatisticItem(t.id))),console.log(this.#l),this.#t.map((t=>{t.order.map((e=>{this.#f(e,t.retailer.getId())}))})),this.#L(),this.#D(),this.#m=this.#l.filter((({orderAmount:t})=>t>0)),this.#x(),this.#S(),this.#v(),console.log(this.#l),this.#u=this.#u+this.#n-this.#c,this.#t=[]};getStatistic=()=>this.#m;getShortStat=()=>[{volume:this.#m.reduce(((t,{totalCost:e})=>t+e),0),profit:this.#m.reduce(((t,{profitCost:e})=>t+e),0),losses:this.#m.reduce(((t,{totalLosses:e})=>t+e),0)}];#D=()=>{this.#t.map((t=>t.order.map((({id:t,amount:e})=>{let r=this.#l[t-201];r.orderAmount=r.orderAmount+e})))),this.#y.map((({id:t,amount:e,price:r})=>{let i=this.#l[t-201];i.departuresAmount=i.departuresAmount+e,i.totalCost=i.totalCost+r*e,i.profitCost=i.profitCost+(r-this.#s.getProductbyId(t).initialPrice)*e})),this.#i.filter((t=>0==t.expiryDate)).map((({id:t,amount:e,initialPrice:r})=>{let i=this.#l[t-201];i.totalLosses=i.totalLosses+e*r,i.lossesAmount=i.lossesAmount+e}))};#f=(t,e)=>{let{amount:r}=t;const i=this.getProductbyId(t.id),s=this.getProductExceptById(t.id),o=i.map((i=>{if(r>=i.amount)return this.#y=[...this.#y,{id:t.id,retailer:e,amount:i.amount,price:i.price}],this.#a=this.#a+i.amount*i.price,this.#n=this.#n+i.amount*(i.price-i.initialPrice),r-=i.amount,{...i,amount:0};{r>0&&(this.#y=[...this.#y,{id:t.id,retailer:e,amount:r,price:i.price}],this.#a=this.#a+r*i.price,this.#n=this.#n+r*(i.price-i.initialPrice));let s=i.amount-r;return r=0,{...i,amount:s}}})).filter((t=>t.amount>0));this.#i=[...s,...o]};#L=()=>{this.#i=this.#i.map((t=>({...t,expiryDate:t.expiryDate-1})))};#x=()=>{this.#c=this.#i.filter((t=>0==t.expiryDate)).reduce(((t,{initialPrice:e,amount:r})=>t+e*r),0),this.#i=this.#i.filter((t=>t.expiryDate>0))};#S=()=>{this.#i=this.#i.map((t=>{if(t.expiryDate<3){let{initialPrice:e}=this.#s.getProductbyId(t.id),r=10*t.expiryDate-10;return{...t,sale:r,price:Math.round(e*(1+r/100))}}return t}))};getProductbyId=t=>this.#i.filter((e=>e.id==t));getProductExceptById=t=>this.#i.filter((e=>e.id!=t));getProducts=()=>this.#h.sort(((t,e)=>t.id<e.id?-1:t.id==e.id?t.expiryDate-e.expiryDate:1));getOrderList=()=>this.#A(this.#p);#A=t=>t.reduce(((t,e)=>[...t,...e.order.map((t=>({id:t.id,retailer:e.retailer.getId(),amount:t.amount})))]),[]);getDepartures=()=>this.#y;getProductAmount=t=>this.getProductbyId(t).reduce(((t,{amount:e})=>t+e),0);#v=()=>{this.#o.map((({id:t,min:e,limit:r})=>{const i=e-this.getProductAmount(t),s=this.getExpectedAmount(t);if(i>0){const e=Math.min(i,r-s);e>0&&this.#e.newOrder(new Order(t,e)),this.#g=[...this.#g.filter((e=>e.id!=t)),{id:t,amount:s+e}]}}))};#g=[];getExpectedDeliveries=()=>this.#g.sort(((t,e)=>t.id-e.id));getExpectedAmount=t=>{const e=this.#g.find((e=>e.id==t));return null==e?0:e.amount};getLosses=()=>this.#c;getVolume=()=>this.#a;getProfitDay=()=>this.#n;getProfitAll=()=>this.#u}class Tester{#P;#e=new Provider;#I;#w;#b;#O;#B;#T;#E=[];constructor(t,e,r,i){const s={products:t.products.filter((t=>t.id<=200+i)),config:t.config.filter((t=>t.id<=200+i)),initialStore:t.initialStore.filter((t=>t.id<=200+i))};this.#b=s,this.#P=new Store(this.#b,this.#e),this.#O=e,this.#B=r,this.#T=i,this.#w=0,this.#E=[],this.#I=new Array(r).fill(0).map(((t,e)=>new Retailer({provider:this.#P,id:101+e}))),nextBtn.classList.remove("hide"),updateUI(this.#P),this.nextStep()}getRetailers=()=>this.#I;nextStep=()=>{this.#q(),this.#e.sendOrder(this.#P),this.#P.newDay(),this.#w=this.#w+1,this.#E=[...this.#E,{day:this.#w,stat:this.#P.getStatistic()}],updateUI(this.#P),updateCounter(this.#w,this.#O),this.#w==this.#O&&(nextBtn.classList.add("hide"),resultsBtn.classList.remove("hide"))};#q=()=>{getRandomArray(0,this.#B-1,getRandomInt(1,this.#B)).forEach((t=>{const e=getRandomArray(201,200+this.#T,getRandomInt(1,5)).map((t=>new Order(t,getRandomInt(10,30))));this.#I[t].makeOrder(e)}))};getCurrentDay=()=>this.#w;getHistory=()=>this.#E}let tester,days=+form.days.value,productsAmount=+form.productsAmount.value,retailersAmount=+form.retailersAmount.value;nextBtn.classList.add("hide"),nextBtn.addEventListener("click",(()=>{tester.nextStep()})),form.addEventListener("submit",(t=>{t.preventDefault(),results.classList.add("hide"),resultsBtn.classList.add("hide"),experiment.classList.remove("hide"),days=+form.days.value,productsAmount=+form.productsAmount.value,retailersAmount=+form.retailersAmount.value,tester=new Tester(db,days,retailersAmount,productsAmount)})),resultsBtn.addEventListener("click",(()=>{experiment.classList.add("hide"),results.classList.remove("hide"),console.log(tester.getHistory()),drawHistory(tester.getHistory())}));