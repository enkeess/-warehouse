"use strict";let days=0,productsAmount=0,retailersAmount=0,minOrder=0,maxOrder=0,minDispatchTime=0,maxDispatchTime=0,db={},ex=null;class Product{id;constructor({id:t}){this.id=t}}class Order extends Product{amount;constructor({id:t,amount:e}){super({id:t}),this.amount=e}}class ProviderOrder extends Order{leadtime;constructor({id:t,amount:e,leadtime:r}){super({id:t,amount:e}),this.leadtime=r}}class DbProduct extends Product{initialPrice;pack;expiryDate;constructor({id:t,initialPrice:e,pack:r,expiryDate:s}){super({id:t}),this.initialPrice=e,this.pack=r,this.expiryDate=s}}class StoreProduct extends DbProduct{margin;amount;price;constructor({id:t,initialPrice:e,pack:r,expiryDate:s,margin:i,amount:o}){super({id:t,initialPrice:e,pack:r,expiryDate:s}),this.margin=i,this.amount=o,this.price=Math.round((1+this.margin/100)*e)}}class RetailerOrder extends Order{retailerId;constructor({id:t,amount:e,retailerId:r}){super({id:t,amount:e}),this.retailerId=r}}class Departure extends RetailerOrder{price;from;constructor({id:t,amount:e,retailerId:r,price:s,from:i}){super({id:t,amount:e,retailerId:r}),this.price=s,this.from=i}}class StatisticItem{id;orderAmount;departuresAmount;lossesAmount;totalCost;profitCost;totalLosses;constructor({id:t,orderAmount:e=0,departuresAmount:r=0,lossesAmount:s=0,totalCost:i=0,profitCost:o=0}){this.id=t,this.orderAmount=e,this.departuresAmount=r,this.lossesAmount=s,this.totalCost=i,this.profitCost=o,this.totalLosses=i}}class ShortStatisticItem{volume;profit;losses;result;constructor({volume:t,profit:e=0,losses:r=0}){this.volume=t||0,this.profit=e,this.losses=r,this.result=this.profit-this.losses}}const getRandomInt=(t,e)=>(t=Math.ceil(t),e=Math.floor(e+1),Math.floor(Math.random()*(e-t))+t),getRandomArray=(t,e,r)=>{let s,i=[];for(;i.length<r;)s=getRandomInt(t,e),-1==i.indexOf(s)&&i.push(s);return i},readFile=t=>{let e=t.files[0],r=new FileReader;r.readAsText(e),r.onload=function(){db=JSON.parse(r.result)},r.onerror=function(){alert(console.log(r.error))}},clearUI=t=>{for(;t.firstChild;)t.firstChild.remove()},withSpan=t=>{const e=document.createElement("span");return e.innerText=t,e},addOptions=(t,e,r,s)=>{for(let s=e;s<=r;s++)t.append(withOption(s));t.value=s||r},withOption=t=>{const e=document.createElement("option");return e.value=t,e.text=t,e},withSelector=(t,e,r,s=-20,i=20)=>{const o=document.createElement("select");return addOptions(o,s,i),o.value=t,o.addEventListener("change",(t=>{e(r,+t.target.value)})),o},nextBtn=document.querySelector("#next"),resultsBtn=document.querySelector("#resultsBtn"),counter=document.querySelector(".counter"),getOrdersBtn=document.querySelector("#get-orders"),details=document.querySelector("#details"),experiment=document.querySelector("#experiment"),results=document.querySelector("#results"),warehouseList=document.querySelector("#warehouse-list"),warehouseTopList=["Код товара","Кол-во упаковок","Кол-во единиц в упаковке","Срок годности (дней) ","Закупочная цена за единицу (у.е)","Наценка с учетом уценки (%)","Цена за единицу (у.е)"],scrappedList=document.querySelector("#scrapped-list"),scrappedTopList=["Код товара","Кол-во единиц товара","Закупочная цена за единицу (у.е)","Общая стоимость"],ordersList=document.querySelector("#orders-list"),orderTopList=["Код товара","Торговая точка","Кол-во единиц товара"],departuresList=document.querySelector("#departures-list"),departuresTopList=["Код товара","Торговая точка","Кол-во упаковок","Цена за единицу (у.е)"],expectedList=document.querySelector("#expected-list"),expectedTopList=["Код товара","Кол-во упаковок"],providerOrders=document.querySelector("#provider-orders"),statList=document.querySelector("#stat-list"),statTopList=["Объем продаж: ","Чистая прибыль: ","Потери при списании: ","Итог: "],historyByDay=document.querySelector("#historyByDay"),historyResult=document.querySelector("#historyResult"),historyBlock=document.querySelector(".history__block"),historyTitle=document.querySelector(".history__title"),historyItem=document.querySelector(".history__item"),historyStat=document.querySelector(".history__stat"),historyWrapper=document.querySelector(".history__wrapper"),historyTopItem=["Код товара","Объем заявок единиц товара","Объем отгруженных единиц товара","Списано единиц товара","Общая прибыль","Чистая прибыль","Потери от списания"],currentDay=document.querySelector("#currentDay"),allDays=document.querySelector("#allDays"),form=document.querySelector("#form");addOptions(form.days,1,30,10),addOptions(form.productsAmount,12,18,12),addOptions(form.retailersAmount,1,9,9),addOptions(form.minOrder,10,100,10),addOptions(form.maxOrder,100,300,300),addOptions(form.minDispatchTime,1,5,1),addOptions(form.maxDispatchTime,1,5,5);const drawTable=(t,e,r,s)=>{clearUI(t);let i=document.createElement("li");i.classList.add("table__line","table__top"),e.map((t=>i.append(withSpan(t)))),s&&s.del&&(t.classList.add("table_del"),i.append(withSpan(""))),t.append(i),r.map(((t,e)=>{let r=document.createElement("li");r.classList.add("table__line","table__item");for(let i in t)"margin"==i&&s&&s.modify?r.append(withSelector(t[i],s.modify,e)):r.append(withSpan(t[i]));if(s&&s.del){const t=document.createElement("button");t.classList.add("btn","btn_del"),t.addEventListener("click",(()=>s.del(e))),r.append(t)}return r})).forEach((e=>t.append(e)))},updateShortUI=t=>{drawTable(ordersList,orderTopList,t.getOrderList()),drawTable(warehouseList,warehouseTopList,t.getProducts(),{modify:t.setMargin}),drawTable(scrappedList,scrappedTopList,t.getScrappedProducts()),drawTable(expectedList,expectedTopList,t.getExpectedDeliveries()),getOrdersBtn.classList.remove("hide"),nextBtn.classList.add("hide"),resultsBtn.classList.add("hide"),details.classList.add("hide")},updateUI=t=>{drawTable(ordersList,orderTopList,t.getOrderList()),drawTable(warehouseList,warehouseTopList,t.getProducts()),drawTable(scrappedList,scrappedTopList,t.getScrappedProducts()),drawTable(departuresList,departuresTopList,t.getDepartures(),{del:t.removeDepartureOrder}),drawTable(expectedList,expectedTopList,t.getExpectedDeliveries()),drawTable(statList,statTopList,t.getShortStat()),drawTable(providerOrders,expectedTopList,t.getProviderOrders(),{del:t.removeProviderOrder}),getOrdersBtn.classList.add("hide"),details.classList.remove("hide")},updateCounter=(t,e)=>{currentDay.innerText=t,allDays.innerText=e},drawHistory=(t,e)=>{clearUI(t),e.forEach((e=>{let r=historyBlock.cloneNode();const s=historyTitle.cloneNode();let i=historyItem.cloneNode(),o=historyStat.cloneNode(),a=historyWrapper.cloneNode();e.day&&(s.innerText=`День ${e.day}`),drawTable(i,historyTopItem,e.stat),drawTable(o,statTopList,e.short),a.append(i),a.append(o),r.append(s),r.append(a),t.append(r)}))};class Provider{#t;#e;#r;constructor({minDispatchTime:t,maxDispatchTime:e}){this.#t=[],this.#e=t,this.#r=e}newOrder=t=>{this.#t=[...this.#t,{order:t,leadTime:getRandomInt(this.#e,this.#r)}]};sendOrder=t=>{this.#t=this.#t.map((t=>({...t,leadTime:t.leadTime-1})));const e=this.#t.filter((t=>0==t.leadTime));this.#t=this.#t.filter((t=>t.leadTime>0)),e.map((e=>t.acceptOrder(e.order)))}}class Store{#s;#i;#o;#a;#d;#n;#c;#u;#p;#m;#l;#h;constructor(t,e){this.#s=t.products,this.#i=t.config,this.#o=e,this.#d=t.initialStore.map((t=>new StoreProduct({...this.#s[t.id-201],...t}))),this.#u=[],this.#p=[],this.#h=[],this.#m=[],this.#l=[],this.#n=this.#d,this.#c=this.#u,this.#a=this.#s.map((t=>new StatisticItem({id:t.id}))),console.log(this.#s)}acceptOrder=t=>{this.#d=[...this.#d,new StoreProduct({...this.#s[t.id-201],...t})],this.#m=this.#m.map((e=>e.id==id?{...e,amount:e.amount-t.amount}:e)).filter((t=>t.amount>0))};newOrder=(t,e)=>{this.#u=[...this.#u,{retailer:t,order:e}]};#y=()=>{this.#a=this.#s.map((t=>new StatisticItem({id:t.id}))),this.#c.forEach((({id:t,amount:e})=>{let r=this.#a[t-201];r.orderAmount=r.orderAmount+e})),this.#p.forEach((({id:t,amount:e,price:r})=>{let s=this.#a[t-201];s.departuresAmount=s.departuresAmount+e*this.#s[t-201].pack,s.totalCost=s.totalCost+r*e*this.#s[t-201].pack,s.profitCost=s.profitCost+(r-this.#s[t-201].initialPrice)*e*this.#s[t-201].pack})),this.#h.forEach((({id:t,amount:e,sum:r})=>{let s=this.#a[t-201];s.totalLosses=s.totalLosses+r,s.lossesAmount=s.lossesAmount+e*this.#s[t-201].pack}))};#x=()=>{this.#d=this.#d.map((t=>new StoreProduct({...t,expiryDate:t.expiryDate-1})))};#L=()=>{this.#h=this.#d.filter((t=>0==t.expiryDate)).map((({id:t,amount:e,initialPrice:r,pack:s})=>({id:t,amount:e,initialPrice:r,sum:s*e*r}))),this.#d=this.#d.filter((t=>t.expiryDate>0))};#O=()=>{this.#d=this.#d.map((t=>{if(t.expiryDate<3){let e=Math.min(10*t.expiryDate-10,t.margin);return new StoreProduct({...t,margin:e})}return t}))};#f=t=>this.#d.map(((e,r)=>{if(e.id==t)return{item:e,index:r}})).filter((t=>null!=t));#D=()=>{this.#d.sort(((t,e)=>t.id<e.id?-1:t.id==e.id?t.expiryDate-e.expiryDate:1))};#v=t=>this.#f(t).reduce(((t,{amount:e})=>t+e),0);#g=()=>{this.#i.map((({id:t,min:e,limit:r})=>{const s=e-this.#v(t),i=this.#S(t);if(s>0){const e=Math.min(s,r-i);e>0&&(this.#l=[...this.#l,new Order({id:t,amount:e})])}}))};#T=()=>{let t;this.#l.forEach((e=>{this.#o.newOrder(e),t=this.#S(e.id),this.#m=[...this.#m.filter((t=>t.id!=e.id)),new Order({...e,amount:t+e.amount})]}))};#S=t=>{const e=this.#m.find((e=>e.id==t));return null==e?0:e.amount};#w=(t,e)=>t.filter(((t,r)=>e!=r));#P=t=>{const{id:e,retailerId:r}=t;let{amount:s}=t,i=Math.max(Math.round(s/this.#s[e-201].pack),1);this.#d=this.#d.map(((t,s)=>{if(t.id==e&&i>0&&t.amount>0){if(i>=t.amount)return this.#p=[...this.#p,{id:e,retailer:r,amount:t.amount,price:t.price,from:s}],i-=t.amount,new StoreProduct({...t,amount:0});{this.#p=[...this.#p,{id:e,retailer:r,amount:i,price:t.price,from:s}];let o=t.amount-i;return i=0,new StoreProduct({...t,amount:o})}}return t}))};newDay=()=>{this.#d=this.#d.filter((t=>t.amount>0)),this.#D(),this.#L(),this.#T(),this.#l=[],this.#n=this.#d,this.#u=[],updateShortUI(this)};processOrders=()=>{this.#c=this.#u,this.#p=[],this.#a=db.products.map((t=>new StatisticItem(t.id))),this.#u.forEach((t=>this.#P(t))),this.#x(),this.#y(),this.#O(),this.#g(),this.#u=[],updateUI(this)};acceptOrder=t=>{this.#d=[...this.#d,new StoreProduct({...this.#s[t.id-201],...t})],this.#m=this.#m.map((e=>e.id==t.id?new Order({...e,amount:e.amount-t.amount}):e)).filter((t=>t.amount>0))};newOrder=t=>{this.#u=[...this.#u,t]};removeProviderOrder=t=>{this.#l=this.#w(this.#l,t),updateUI(this)};removeDepartureOrder=t=>{const{from:e,amount:r}=this.#p[t];this.#d[e]={...this.#d[e],amount:this.#d[e].amount+r},this.#p=this.#w(this.#p,t),this.#y(),updateUI(this)};setMargin=(t,e)=>{this.#n[t]=new StoreProduct({...this.#n[t],margin:e}),this.#d[t]=new StoreProduct({...this.#d[t],margin:e}),updateShortUI(this)};getStatistic=()=>this.#a;getShortStat=()=>{const t=this.#a.reduce(((t,{profitCost:e})=>t+e),0),e=this.#a.reduce(((t,{totalLosses:e})=>t+e),0),r=this.#a.reduce(((t,{totalCost:e})=>t+e),0);return[new ShortStatisticItem({volume:r,losses:e,profit:t})]};getProducts=()=>this.#n.map((({id:t,amount:e,pack:r,expiryDate:s,initialPrice:i,margin:o,price:a})=>({id:t,amount:e,pack:r,expiryDate:s,initialPrice:i,margin:o,price:a})));getScrappedProducts=()=>this.#h;getOrderList=()=>this.#c.map((({id:t,retailerId:e,amount:r})=>({id:t,retailerId:e,amount:r})));getDepartures=()=>this.#p.map((({id:t,retailer:e,amount:r,price:s})=>({id:t,retailer:e,amount:r,price:s})));getProviderOrders=()=>this.#l;getExpectedDeliveries=()=>this.#m.sort(((t,e)=>t.id-e.id))}class Experiment{#A;#o;#I;#b;#B;#E;#k;#q;#C;#_;#R;constructor({db:t,days:e,retailersAmount:r,productsAmount:s,minOrder:i,maxOrder:o,minDispatchTime:a,maxDispatchTime:d}){const n={products:t.products.filter((t=>t.id<=200+s)).sort(((t,e)=>t.id-e.id)),config:t.config.filter((t=>t.id<=200+s)),initialStore:t.initialStore.filter((t=>t.id<=200+s))};this.#b=n,this.#o=new Provider({minDispatchTime:a,maxDispatchTime:d}),this.#A=new Store(this.#b,this.#o),this.#k=e,this.#q=r,this.#C=s,this.#_=i,this.#R=o,this.#I=0,this.#B=[],this.#E={stat:n.products.map((t=>new StatisticItem({id:t.id}))),short:[new ShortStatisticItem({volume:0})]},nextBtn.classList.remove("hide"),this.nextStep()}#M=()=>{const t=getRandomArray(101,100+this.#q,getRandomInt(1,this.#q)),e=this.#A.getProducts().map((({id:t,margin:e})=>({id:t,chance:.5+.0125*(20-e)})));t.forEach((t=>{e.forEach((({id:e,chance:r})=>{if(Math.random()<=r){let r=getRandomInt(this.#_,this.#R);this.#A.newOrder(new RetailerOrder({id:e,amount:r,retailerId:t}))}}))}))};nextStep=()=>{this.#I>0&&this.updateHistory(),this.#o.sendOrder(this.#A),this.#A.newDay(),this.#I=this.#I+1,updateCounter(this.#I,this.#k)};makeOrders=()=>{this.#M(),this.#A.processOrders(),nextBtn.classList.remove("hide"),this.#I==this.#k&&(nextBtn.classList.add("hide"),resultsBtn.classList.remove("hide"))};updateHistory=()=>{this.#B=[...this.#B,{day:this.#I,stat:this.#A.getStatistic(),short:this.#A.getShortStat()}]};calcResult=()=>{this.#B.forEach((({stat:t,short:e})=>{t.forEach((t=>{const{id:e,orderAmount:r,departuresAmount:s,lossesAmount:i,totalCost:o,profitCost:a,totalLosses:d}=this.#E.stat[t.id-201];this.#E.stat[t.id-201]={id:e,orderAmount:r+t.orderAmount,departuresAmount:s+t.departuresAmount,lossesAmount:i+t.lossesAmount,totalCost:o+t.totalCost,profitCost:a+t.profitCost,totalLosses:d+t.totalLosses}})),e.forEach((t=>{const{volume:e,profit:r,losses:s,result:i}=this.#E.short[0];this.#E.short=[{volume:e+t.volume,profit:r+t.profit,losses:s+t.losses,result:i+t.result}]}))}))};getCurrentDay=()=>this.#I;getHistory=()=>this.#B;getResult=()=>[this.#E]}nextBtn.classList.add("hide"),nextBtn.addEventListener("click",(()=>{ex.nextStep()})),form.config.addEventListener("change",(t=>readFile(t.target))),form.addEventListener("submit",(t=>{t.preventDefault(),results.classList.add("hide"),resultsBtn.classList.add("hide"),experiment.classList.remove("hide"),days=+form.days.value,productsAmount=+form.productsAmount.value,retailersAmount=+form.retailersAmount.value,minOrder=+form.minOrder.value,maxOrder=+form.maxOrder.value,minDispatchTime=+form.minDispatchTime.value,maxDispatchTime=+form.maxDispatchTime.value,minDispatchTime>maxDispatchTime&&(maxDispatchTime=minDispatchTime,form.maxDispatchTime.value=minDispatchTime),ex=new Experiment({db:db,days:days,retailersAmount:retailersAmount,productsAmount:productsAmount,minOrder:minOrder,maxOrder:maxOrder,minDispatchTime:minDispatchTime,maxDispatchTime:maxDispatchTime})})),getOrdersBtn.addEventListener("click",(()=>{ex.makeOrders()})),resultsBtn.addEventListener("click",(()=>{experiment.classList.add("hide"),results.classList.remove("hide"),ex.updateHistory(),ex.calcResult(),drawHistory(historyResult,ex.getResult()),drawHistory(historyByDay,ex.getHistory())}));