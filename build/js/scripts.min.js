import db from"../data/product-base.json"assert{type:"json"};const getRandomInt=(t,e)=>(t=Math.ceil(t),e=Math.floor(e+1),Math.floor(Math.random()*(e-t))+t),getRandomArray=(t,e,r)=>{let s,i=[];for(;i.length<r;)s=getRandomInt(t,e),-1==i.indexOf(s)&&i.push(s);return i},nextBtn=document.querySelector("#next"),resultsBtn=document.querySelector("#resultsBtn"),counter=document.querySelector(".counter"),experiment=document.querySelector("#experiment"),results=document.querySelector("#results"),warehouseList=document.querySelector("#warehouse-list"),warehouseTopList=["Код товара","Кол-во единиц","Срок годности (дней) ","Закупочная цена за единицу (у.е)","Базовая наценка (%)","Наценка с учетом уценки (%)","Цена за единицу (у.е)"],scrappedList=document.querySelector("#scrapped-list"),ordersList=document.querySelector("#orders-list"),orderTopList=["Код товара","Торговая точка","Кол-во единиц"],departuresList=document.querySelector("#departures-list"),departuresTopList=["Код товара","Торговая точка","Кол-во единиц","Цена за единицу (у.е)"],expectedList=document.querySelector("#expected-list"),expectedTopList=["Код товара","Кол-во единиц"],statList=document.querySelector("#stat-list"),statTopList=["Объем продаж","Чистая прибыль","Потери при списании","Итог"],historyByDay=document.querySelector("#historyByDay"),historyResult=document.querySelector("#historyResult"),historyBlock=document.querySelector(".history__block"),historyTitle=document.querySelector(".history__title"),historyItem=document.querySelector(".history__item"),historyStat=document.querySelector(".history__stat"),historyWrapper=document.querySelector(".history__wrapper"),historyTopItem=["Код товара","Объем заявок","Объем отгруженных","Списано","Общая стоимость","Чистая прибыль ","Потери от списания"],currentDay=document.querySelector("#currentDay"),allDays=document.querySelector("#allDays"),form=document.querySelector("#form"),clearUI=t=>{for(;t.firstChild;)t.firstChild.remove()};clearUI(history);const withSpan=t=>{const e=document.createElement("span");return e.innerText=t,e},drawTable=(t,e,r)=>{clearUI(t);let s=document.createElement("li");s.classList.add("table__line","table__top"),e.map((t=>s.append(withSpan(t)))),t.append(s),r.map((t=>{let e=document.createElement("li");e.classList.add("table__line","table__item");for(let r in t){let s=document.createElement("span");s.innerText=t[r],e.append(s)}return e})).forEach((e=>t.append(e)))},updateUI=t=>{drawTable(ordersList,orderTopList,t.getOrderList()),drawTable(warehouseList,warehouseTopList,t.getProducts()),drawTable(scrappedList,warehouseTopList,t.getScrappedProducts()),drawTable(departuresList,departuresTopList,t.getDepartures()),drawTable(expectedList,expectedTopList,t.getExpectedDeliveries()),drawTable(statList,statTopList,t.getShortStat())},updateCounter=(t,e)=>{currentDay.innerText=t,allDays.innerText=e},drawHistory=(t,e)=>{clearUI(t),e.forEach((e=>{console.log(e);let r=historyBlock.cloneNode();const s=historyTitle.cloneNode();let i=historyItem.cloneNode(),o=historyStat.cloneNode(),a=historyWrapper.cloneNode();e.day&&(s.innerText=`День ${e.day}`),drawTable(i,historyTopItem,e.stat),drawTable(o,statTopList,e.short),a.append(i),a.append(o),r.append(s),r.append(a),t.append(r)}))};function Order(t,e){this.id=t,this.amount=e}class Provider{#t=[];newOrder=t=>{this.#t=[...this.#t,{order:t,leadTime:getRandomInt(1,5)}]};sendOrder=t=>{this.#t=this.#t.map((t=>({...t,leadTime:t.leadTime-1})));const e=this.#t.filter((t=>0==t.leadTime));this.#t=this.#t.filter((t=>t.leadTime>0)),e.map((e=>t.getOrder(e.order)))}}class Retailer{#e;#r;constructor({provider:t,id:e}){this.#e=t,this.#r=e}getId=()=>this.#r;makeOrder=t=>{this.#e.newOrder(this,t)}}let products=db.products;const getProductbyId=t=>products.find((e=>e.id==t));class ProductsBase{#s;constructor(t){this.#s=t}getProductbyId=t=>this.#s.find((e=>e.id==t))}class Statistic{list}class StatisticDay{day;statisticsList}function StatisticItem(t){this.id=t,this.orderAmount=0,this.departuresAmount=0,this.lossesAmount=0,this.totalCost=0,this.profitCost=0,this.totalLosses=0}class Store{#s;#i;#o;#a;#d=1.2;#e;#u=0;#n=0;#c;#l=0;#p=[];#h=[];#m;#y;#g=[];constructor(t,e){this.#o=new ProductsBase(t.products),this.#a=t.config,this.#s=t.initialStore.map((t=>{let{initialPrice:e}=this.#o.getProductbyId(t.id);return{...t,initialPrice:e,profit:Math.round(100*(this.#d-1)),sale:"-",price:Math.round(e*this.#d)}})),this.#e=e,this.#m=this.#s,this.#y=this.#t,this.#p=t.products.map((t=>new StatisticItem(t.id))),this.#h=t.products.map((t=>new StatisticItem(t.id))),this.#i=[]}#t=[];#f=[];getOrder=t=>{const{id:e,initialPrice:r,expiryDate:s}=this.#o.getProductbyId(t.id);this.#s=[...this.#s,{id:e,amount:t.amount,expiryDate:s,initialPrice:r,profit:Math.round(100*(this.#d-1)),sale:"-",price:Math.round(r*this.#d)}],this.#L=this.#L.map((r=>r.id==e?{...r,amount:r.amount-t.amount}:r)).filter((t=>t.amount>0))};newOrder=(t,e)=>{this.#t=[...this.#t,{retailer:t,order:e}]};newDay=()=>{this.#m=this.#s,this.#y=this.#t,this.#f=[],this.#u=0,this.#n=0,this.#p=db.products.map((t=>new StatisticItem(t.id))),this.#t.map((t=>{t.order.map((e=>{this.#S(e,t.retailer.getId())}))})),this.#D(),this.#x(),this.#g=this.#p.filter((({orderAmount:t})=>t>0)),this.#v(),this.#A(),this.#P(),this.#l=this.#l+this.#n-this.#c,this.#t=[]};getStatistic=()=>this.#g;getResult=()=>this.#h;getShortRes=()=>{const t=this.#h.reduce(((t,{profitCost:e})=>t+e),0),e=this.#h.reduce(((t,{totalLosses:e})=>t+e),0);return[{volume:this.#h.reduce(((t,{totalCost:e})=>t+e),0),profit:t,losses:e,result:t-e}]};getShortStat=()=>{const t=this.#g.reduce(((t,{profitCost:e})=>t+e),0),e=this.#g.reduce(((t,{totalLosses:e})=>t+e),0);return[{volume:this.#g.reduce(((t,{totalCost:e})=>t+e),0),profit:t,losses:e,result:t-e}]};#x=()=>{this.#t.map((t=>t.order.map((({id:t,amount:e})=>{let r=this.#p[t-201];r.orderAmount=r.orderAmount+e;let s=this.#h[t-201];s.orderAmount=s.orderAmount+e})))),this.#f.map((({id:t,amount:e,price:r})=>{let s=this.#p[t-201];s.departuresAmount=s.departuresAmount+e,s.totalCost=s.totalCost+r*e,s.profitCost=s.profitCost+(r-this.#o.getProductbyId(t).initialPrice)*e;let i=this.#h[t-201];i.departuresAmount=s.departuresAmount+e,i.totalCost=i.totalCost+r*e,i.profitCost=i.profitCost+(r-this.#o.getProductbyId(t).initialPrice)*e})),this.#s.filter((t=>0==t.expiryDate)).map((({id:t,amount:e,initialPrice:r})=>{let s=this.#p[t-201];s.totalLosses=s.totalLosses+e*r,s.lossesAmount=s.lossesAmount+e;let i=this.#h[t-201];i.totalLosses=i.totalLosses+e*r,i.lossesAmount=i.lossesAmount+e}))};#S=(t,e)=>{let{amount:r}=t;const s=this.getProductbyId(t.id),i=this.getProductExceptById(t.id),o=s.map((s=>{if(r>=s.amount)return this.#f=[...this.#f,{id:t.id,retailer:e,amount:s.amount,price:s.price}],this.#u=this.#u+s.amount*s.price,this.#n=this.#n+s.amount*(s.price-s.initialPrice),r-=s.amount,{...s,amount:0};{r>0&&(this.#f=[...this.#f,{id:t.id,retailer:e,amount:r,price:s.price}],this.#u=this.#u+r*s.price,this.#n=this.#n+r*(s.price-s.initialPrice));let i=s.amount-r;return r=0,{...s,amount:i}}})).filter((t=>t.amount>0));this.#s=[...i,...o]};#D=()=>{this.#s=this.#s.map((t=>({...t,expiryDate:t.expiryDate-1})))};#v=()=>{this.#i=this.#s.filter((t=>0==t.expiryDate)),this.#c=this.#i.reduce(((t,{initialPrice:e,amount:r})=>t+e*r),0),this.#s=this.#s.filter((t=>t.expiryDate>0))};#A=()=>{this.#s=this.#s.map((t=>{if(t.expiryDate<3){let{initialPrice:e}=this.#o.getProductbyId(t.id),r=10*t.expiryDate-10;return{...t,sale:r,price:Math.round(e*(1+r/100))}}return t}))};getProductbyId=t=>this.#s.filter((e=>e.id==t));getProductExceptById=t=>this.#s.filter((e=>e.id!=t));getProducts=()=>this.#m.sort(((t,e)=>t.id<e.id?-1:t.id==e.id?t.expiryDate-e.expiryDate:1));getScrappedProducts=()=>this.#i;getOrderList=()=>this.#w(this.#y);#w=t=>t.reduce(((t,e)=>[...t,...e.order.map((t=>({id:t.id,retailer:e.retailer.getId(),amount:t.amount})))]),[]);getDepartures=()=>this.#f;getProductAmount=t=>this.getProductbyId(t).reduce(((t,{amount:e})=>t+e),0);#P=()=>{this.#a.map((({id:t,min:e,limit:r})=>{const s=e-this.getProductAmount(t),i=this.getExpectedAmount(t);if(s>0){const e=Math.min(s,r-i);e>0&&this.#e.newOrder(new Order(t,e)),this.#L=[...this.#L.filter((e=>e.id!=t)),{id:t,amount:i+e}]}}))};#L=[];getExpectedDeliveries=()=>this.#L.sort(((t,e)=>t.id-e.id));getExpectedAmount=t=>{const e=this.#L.find((e=>e.id==t));return null==e?0:e.amount}}class Tester{#T;#e=new Provider;#I;#b;#B;#O;#R;#q;#C=[];#h=[];constructor(t,e,r,s){const i={products:t.products.filter((t=>t.id<=200+s)),config:t.config.filter((t=>t.id<=200+s)),initialStore:t.initialStore.filter((t=>t.id<=200+s))};this.#B=i,this.#T=new Store(this.#B,this.#e),this.#O=e,this.#R=r,this.#q=s,this.#b=0,this.#C=[],this.#I=new Array(r).fill(0).map(((t,e)=>new Retailer({provider:this.#T,id:101+e}))),nextBtn.classList.remove("hide"),updateUI(this.#T),this.nextStep()}getRetailers=()=>this.#I;nextStep=()=>{this.#E(),this.#e.sendOrder(this.#T),this.#T.newDay(),this.#b=this.#b+1,this.#C=[...this.#C,{day:this.#b,stat:this.#T.getStatistic(),short:this.#T.getShortStat()}],updateUI(this.#T),updateCounter(this.#b,this.#O),this.#b==this.#O&&(this.#_(),nextBtn.classList.add("hide"),resultsBtn.classList.remove("hide"))};#E=()=>{getRandomArray(0,this.#R-1,getRandomInt(1,this.#R)).forEach((t=>{const e=getRandomArray(201,200+this.#q,getRandomInt(1,5)).map((t=>new Order(t,getRandomInt(10,30))));this.#I[t].makeOrder(e)}))};#_=()=>{this.#C.forEach((t=>{console.log(t.stat)}))};getCurrentDay=()=>this.#b;getHistory=()=>this.#C;getResult=()=>[{stat:this.#T.getResult(),short:this.#T.getShortRes()}]}let tester,days=+form.days.value,productsAmount=+form.productsAmount.value,retailersAmount=+form.retailersAmount.value;nextBtn.classList.add("hide"),nextBtn.addEventListener("click",(()=>{tester.nextStep()})),form.addEventListener("submit",(t=>{t.preventDefault(),results.classList.add("hide"),resultsBtn.classList.add("hide"),experiment.classList.remove("hide"),days=+form.days.value,productsAmount=+form.productsAmount.value,retailersAmount=+form.retailersAmount.value,tester=new Tester(db,days,retailersAmount,productsAmount)})),resultsBtn.addEventListener("click",(()=>{experiment.classList.add("hide"),results.classList.remove("hide"),console.log(tester.getHistory()),drawHistory(historyResult,tester.getResult()),drawHistory(historyByDay,tester.getHistory())}));