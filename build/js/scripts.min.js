"use strict";let days=0,productsAmount=0,retailersAmount=0,minOrder=0,maxOrder=0,minDispatchTime=0,maxDispatchTime=0,db={},ex=null,slider=null;class Product{id;title;constructor({id:t,title:e}){this.id=t,this.title=e}}class Order extends Product{amount;constructor({id:t,title:e,amount:r}){super({id:t,title:e}),this.amount=r}}class ProviderOrder extends Order{leadtime;constructor({id:t,title:e,amount:r,leadtime:i}){super({id:t,title:e,amount:r}),this.leadtime=i}}class DbProduct extends Product{initialPrice;pack;expiryDate;constructor({id:t,initialPrice:e,pack:r,expiryDate:i,title:s}){super({id:t,title:s}),this.initialPrice=e,this.pack=r,this.expiryDate=i}}class StoreProduct extends DbProduct{margin;amount;price;constructor({id:t,initialPrice:e,pack:r,expiryDate:i,margin:s,amount:o,title:d}){super({id:t,initialPrice:e,pack:r,expiryDate:i,title:d}),this.margin=s,this.amount=o,this.price=Math.round((1+this.margin/100)*e)}}class RetailerOrder extends Order{retailerId;constructor({id:t,amount:e,retailerId:r,title:i}){super({id:t,amount:e,title:i}),this.retailerId=r}}class Departure extends RetailerOrder{price;from;constructor({id:t,amount:e,retailerId:r,price:i,from:s,title:o}){super({id:t,amount:e,retailerId:r,title:o}),this.price=i,this.from=s}}class StatisticItem{id;title;orderAmount;departuresAmount;lossesAmount;totalCost;profitCost;totalLosses;constructor({id:t,title:e,orderAmount:r=0,departuresAmount:i=0,lossesAmount:s=0,totalCost:o=0,profitCost:d=0}){this.id=t,this.title=e,this.orderAmount=r,this.departuresAmount=i,this.lossesAmount=s,this.totalCost=o,this.profitCost=d,this.totalLosses=o}}class ShortStatisticItem{volume;profit;losses;result;constructor({volume:t,profit:e=0,losses:r=0}){this.volume=t||0,this.profit=e,this.losses=r,this.result=this.profit-this.losses}}const getRandomInt=(t,e)=>(t=Math.ceil(t),e=Math.floor(e+1),Math.floor(Math.random()*(e-t))+t),getRandomArray=(t,e,r)=>{let i,s=[];for(;s.length<r;)i=getRandomInt(t,e),-1==s.indexOf(i)&&s.push(i);return s},readFile=t=>{let e=t.files[0],r=new FileReader;r.readAsText(e),r.onload=function(){db=JSON.parse(r.result)},r.onerror=function(){alert(console.log(r.error))}},clearUI=t=>{for(;t.firstChild;)t.firstChild.remove()},withSpan=t=>{const e=document.createElement("span");return e.innerText=t,e},addOptions=(t,e,r,i)=>{for(let i=e;i<=r;i++)t.append(withOption(i));t.value=i||r},withOption=t=>{const e=document.createElement("option");return e.value=t,e.text=t,e},withSelector=(t,e,r,i=-20,s=20)=>{const o=document.createElement("select");return addOptions(o,i,s),o.value=t,o.addEventListener("change",(t=>{e(r,+t.target.value)})),o},nextBtn=document.querySelector("#next"),resultsBtn=document.querySelector("#resultsBtn"),counter=document.querySelector(".counter"),rebootBtn=document.querySelector("#reboot"),toEndBtn=document.querySelector("#to-end"),getOrdersBtn=document.querySelector("#get-orders"),details=document.querySelector("#details"),experiment=document.querySelector("#experiment"),results=document.querySelector("#results"),setup=document.querySelector("#setup"),warehouseList=document.querySelector("#warehouse-list"),warehouseTopList=["Название","Кол-во упаковок","Кол-во единиц в упаковке","Срок годности (дней) ","Закупочная цена за единицу (у.е)","Наценка с учетом уценки (%)","Цена за единицу (у.е)"],scrappedList=document.querySelector("#scrapped-list"),scrappedTopList=["Название","Кол-во единиц товара","Закупочная цена за единицу (у.е)","Общая стоимость"],ordersList=document.querySelector("#orders-list"),orderTopList=["Название","Торговая точка","Кол-во единиц товара"],departuresList=document.querySelector("#departures-list"),departuresTopList=["Название","Торговая точка","Кол-во упаковок","Цена за единицу (у.е)"],expectedList=document.querySelector("#expected-list"),expectedTopList=["Название","Кол-во упаковок"],providerOrders=document.querySelector("#provider-orders"),statList=document.querySelector("#stat-list"),statTopList=["Объем продаж (у.е.): ","Чистая прибыль (у.е.): ","Потери при списании (у.е.): ","Итог (у.е.): "],historyByDay=document.querySelector("#historyByDay"),historyResult=document.querySelector("#historyResult"),historyBlock=document.querySelector(".history__block"),historyTitle=document.querySelector(".history__title"),historyItem=document.querySelector(".history__item"),historyStat=document.querySelector(".history__stat"),historyWrapper=document.querySelector(".history__wrapper"),historyTopItem=["Название","Объем заявок единиц товара","Объем отгруженных единиц товара","Списано единиц товара","Общая прибыль","Чистая прибыль","Потери от списания"],currentDay=document.querySelector("#currentDay"),allDays=document.querySelector("#allDays"),form=document.querySelector("#form");addOptions(form.days,1,30,10),addOptions(form.productsAmount,12,18,12),addOptions(form.retailersAmount,1,9,9),addOptions(form.minOrder,10,100,10),addOptions(form.maxOrder,100,300,300),addOptions(form.minDispatchTime,1,5,1),addOptions(form.maxDispatchTime,1,5,5);const drawTable=(t,e,r,i)=>{clearUI(t);let s=document.createElement("li");s.classList.add("table__line","table__top"),e.map((t=>s.append(withSpan(t)))),i&&i.del&&(t.classList.add("table_del"),s.append(withSpan(""))),t.append(s),r.map(((t,e)=>{let r=document.createElement("li");r.classList.add("table__line","table__item");for(let s in t)"margin"==s&&i&&i.modify?r.append(withSelector(t[s],i.modify,e)):"id"!=s&&r.append(withSpan(t[s]));if(i&&i.del){const t=document.createElement("button");t.classList.add("btn","btn_del"),t.addEventListener("click",(()=>i.del(e))),r.append(t)}return r})).forEach((e=>t.append(e)))},updateShortUI=t=>{drawTable(ordersList,orderTopList,t.getOrderList()),drawTable(warehouseList,warehouseTopList,t.getProducts(),{modify:t.setMargin}),drawTable(scrappedList,scrappedTopList,t.getScrappedProducts()),drawTable(expectedList,expectedTopList,t.getExpectedDeliveries()),getOrdersBtn.classList.remove("hide"),nextBtn.classList.add("hide"),resultsBtn.classList.add("hide"),details.classList.add("hide")},updateUI=t=>{drawTable(ordersList,orderTopList,t.getOrderList()),drawTable(warehouseList,warehouseTopList,t.getProducts()),drawTable(scrappedList,scrappedTopList,t.getScrappedProducts()),drawTable(departuresList,departuresTopList,t.getDepartures(),{del:t.removeDepartureOrder}),drawTable(expectedList,expectedTopList,t.getExpectedDeliveries()),drawTable(statList,statTopList,t.getShortStat()),drawTable(providerOrders,expectedTopList,t.getProviderOrders(),{del:t.removeProviderOrder}),getOrdersBtn.classList.add("hide"),details.classList.remove("hide")},updateCounter=(t,e)=>{currentDay.innerText=t,allDays.innerText=e},drawHistory=(t,e)=>{clearUI(t),e.forEach((e=>{let r=historyBlock.cloneNode();const i=historyTitle.cloneNode();let s=historyItem.cloneNode(),o=historyStat.cloneNode(),d=historyWrapper.cloneNode();e.day&&(i.innerText=`День ${e.day}`),drawTable(s,historyTopItem,e.stat),drawTable(o,statTopList,e.short),d.append(s),d.append(o),r.append(i),r.append(d),t.append(r)}))},nextSlideBtn=document.querySelector("#next-slide"),prevSlideBtn=document.querySelector("#prev-slide");class Slider{constructor(t,e,r,i){console.log("new slider"),this.wrapper=e,this.container=t,e.style.left="",r.classList.remove("hide"),this.shift=0,this.containerWidth=t.clientWidth,this.wrapperWidth=e.scrollWidth,i.classList.add("hide"),-(this.shift-this.containerWidth)>=this.wrapperWidth&&r.classList.add("hide"),r.addEventListener("click",this.nextClideAction),i.addEventListener("click",this.prevSlideAction)}nextClideAction=()=>{prevSlideBtn.classList.remove("hide"),this.shift=this.shift-this.containerWidth,this.wrapper.style.left=`${this.shift}px`,-(this.shift-this.containerWidth)>=this.wrapperWidth&&nextSlideBtn.classList.add("hide")};prevSlideAction=()=>{nextSlideBtn.classList.remove("hide"),this.shift=this.shift+this.containerWidth,this.wrapper.style.left=`${this.shift}px`,0==this.shift&&prevSlideBtn.classList.add("hide")};removeActions=()=>{nextSlideBtn.removeEventListener("click",this.nextClideAction),prevSlideBtn.removeEventListener("click",this.prevSlideAction)}}class Provider{#t;#e;#r;constructor({minDispatchTime:t,maxDispatchTime:e}){this.#t=[],this.#e=t,this.#r=e}newOrder=t=>{this.#t=[...this.#t,{order:t,leadTime:getRandomInt(this.#e,this.#r)}]};sendOrder=t=>{this.#t=this.#t.map((t=>({...t,leadTime:t.leadTime-1})));const e=this.#t.filter((t=>0==t.leadTime));this.#t=this.#t.filter((t=>t.leadTime>0)),e.map((e=>t.acceptOrder(e.order)))}}class Store{#i;#s;#o;#d;#a;#n;#c;#l;#u;#p;#h;constructor(t,e){this.#i=t.products,this.#s=e,this.#d=t.initialStore.map((t=>new StoreProduct({...this.#i[t.id-201],...t}))),this.#c=[],this.#l=[],this.#h=[],this.#u=[],this.#p=[],this.#a=this.#d,this.#n=this.#c,this.#o=this.#i.map((({id:t,title:e})=>new StatisticItem({id:t,title:e}))),console.log(this.#i)}acceptOrder=t=>{this.#d=[...this.#d,new StoreProduct({...this.#i[t.id-201],...t})],this.#u=this.#u.map((e=>e.id==id?{...e,amount:e.amount-t.amount}:e)).filter((t=>t.amount>0))};newOrder=(t,e)=>{this.#c=[...this.#c,{retailer:t,order:e}]};#m=()=>{this.#o=this.#i.map((({id:t,title:e})=>new StatisticItem({id:t,title:e}))),this.#n.forEach((({id:t,amount:e})=>{let r=this.#o[t-201];r.orderAmount=r.orderAmount+e})),this.#l.forEach((({id:t,amount:e,price:r})=>{let i=this.#o[t-201];i.departuresAmount=i.departuresAmount+e*this.#i[t-201].pack,i.totalCost=i.totalCost+r*e*this.#i[t-201].pack,i.profitCost=i.profitCost+(r-this.#i[t-201].initialPrice)*e*this.#i[t-201].pack})),this.#h.forEach((({id:t,amount:e,sum:r})=>{let i=this.#o[t-201];i.totalLosses=i.totalLosses+r,i.lossesAmount=i.lossesAmount+e*this.#i[t-201].pack}))};#y=()=>{this.#d=this.#d.map((t=>new StoreProduct({...t,expiryDate:t.expiryDate-1})))};#x=()=>{this.#h=this.#d.filter((t=>0==t.expiryDate)).map((({id:t,amount:e,initialPrice:r,pack:i})=>({id:t,amount:e,initialPrice:r,sum:i*e*r}))),this.#d=this.#d.filter((t=>t.expiryDate>0))};#L=()=>{this.#d=this.#d.map((t=>{if(t.expiryDate<3){let e=Math.min(10*t.expiryDate-10,t.margin);return new StoreProduct({...t,margin:e})}return t}))};#f=t=>this.#d.map(((e,r)=>{if(e.id==t)return{item:e,index:r}})).filter((t=>null!=t));#v=()=>{this.#d.sort(((t,e)=>t.title<e.title?-1:t.id==e.id?t.expiryDate-e.expiryDate:1))};#O=t=>this.#f(t).reduce(((t,{amount:e})=>t+e),0);#S=()=>{this.#i.map((({id:t,min:e,limit:r})=>{const i=e-this.#O(t),s=this.#D(t);if(i>0){const{title:e}=this.#i[t-201],o=Math.min(i,r-s);o>0&&(this.#p=[...this.#p,new Order({id:t,amount:o,title:e})])}}))};#g=()=>{let t;this.#p.forEach((e=>{this.#s.newOrder(e),t=this.#D(e.id),this.#u=[...this.#u.filter((t=>t.id!=e.id)),new Order({...e,amount:t+e.amount})]}))};#D=t=>{const e=this.#u.find((e=>e.id==t));return null==e?0:e.amount};#w=(t,e)=>t.filter(((t,r)=>e!=r));#T=t=>{const{id:e,retailerId:r,title:i}=t;let{amount:s}=t,o=Math.max(Math.round(s/this.#i[e-201].pack),1);this.#d=this.#d.map(((t,s)=>{if(t.id==e&&o>0&&t.amount>0){if(o>=t.amount)return this.#l=[...this.#l,new Departure({id:e,retailerId:r,amount:o,price:t.price,from:s,title:i})],o-=t.amount,new StoreProduct({...t,amount:0});{this.#l=[...this.#l,new Departure({id:e,retailerId:r,amount:o,price:t.price,from:s,title:i})];let d=t.amount-o;return o=0,new StoreProduct({...t,amount:d})}}return t}))};newDay=()=>{this.#d=this.#d.filter((t=>t.amount>0)),this.#v(),this.#x(),this.#g(),this.#p=[],this.#a=this.#d,this.#c=[],updateShortUI(this)};processOrders=()=>{this.#n=this.#c,this.#l=[],this.#o=db.products.map((t=>new StatisticItem(t.id))),this.#c.forEach((t=>this.#T(t))),this.#y(),this.#m(),this.#L(),this.#S(),this.#c=[],updateUI(this)};acceptOrder=t=>{this.#d=[...this.#d,new StoreProduct({...this.#i[t.id-201],...t})],this.#u=this.#u.map((e=>e.id==t.id?new Order({...e,amount:e.amount-t.amount}):e)).filter((t=>t.amount>0))};newOrder=t=>{this.#c=[...this.#c,t]};removeProviderOrder=t=>{this.#p=this.#w(this.#p,t),updateUI(this)};removeDepartureOrder=t=>{const{from:e,amount:r}=this.#l[t];this.#d[e]={...this.#d[e],amount:this.#d[e].amount+r},this.#l=this.#w(this.#l,t),this.#m(),updateUI(this)};setMargin=(t,e)=>{this.#a[t]=new StoreProduct({...this.#a[t],margin:e}),this.#d[t]=new StoreProduct({...this.#d[t],margin:e}),updateShortUI(this)};getStatistic=()=>this.#o;getShortStat=()=>{const t=this.#o.reduce(((t,{profitCost:e})=>t+e),0),e=this.#o.reduce(((t,{totalLosses:e})=>t+e),0),r=this.#o.reduce(((t,{totalCost:e})=>t+e),0);return[new ShortStatisticItem({volume:r,losses:e,profit:t})]};getProducts=()=>this.#a.map((({id:t,title:e,amount:r,pack:i,expiryDate:s,initialPrice:o,margin:d,price:a})=>({id:t,title:e,amount:r,pack:i,expiryDate:s,initialPrice:o,margin:d,price:a})));getScrappedProducts=()=>this.#h;getOrderList=()=>this.#n.map((({id:t,title:e,retailerId:r,amount:i})=>({id:t,title:e,retailerId:r,amount:i})));getDepartures=()=>this.#l.map((({id:t,title:e,retailerId:r,amount:i,price:s})=>({id:t,title:e,retailerId:r,amount:i,price:s})));getProviderOrders=()=>this.#p;getExpectedDeliveries=()=>this.#u.sort(((t,e)=>t.id-e.id))}class Experiment{#A;#s;#P;#B;#E;#b;#I;#q;#k;#C;constructor({db:t,days:e,retailersAmount:r,productsAmount:i,minOrder:s,maxOrder:o,minDispatchTime:d,maxDispatchTime:a}){const n={products:t.products.filter((t=>t.id<=200+i)).sort(((t,e)=>t.id-e.id)),initialStore:t.initialStore.filter((t=>t.id<=200+i))};this.#B=n,this.#s=new Provider({minDispatchTime:d,maxDispatchTime:a}),this.#A=new Store(this.#B,this.#s),this.#I=e,this.#q=r,this.#k=s,this.#C=o,this.#P=0,this.#E=[],this.#b={stat:n.products.map((({id:t,title:e})=>new StatisticItem({id:t,title:e}))),short:[new ShortStatisticItem({volume:0})]},nextBtn.classList.remove("hide"),this.nextStep()}#_=()=>{const t=getRandomArray(101,100+this.#q,getRandomInt(1,this.#q)),e=this.#A.getProducts().map((({id:t,title:e,margin:r})=>({id:t,title:e,margin:r}))),r=this.#B.products.map((({id:t,title:e})=>({id:t,title:e,chance:0})));e.forEach((({id:t,margin:e})=>{const i=t-201,s=r[i].chance,o=.5+.0125*(20-e);r[i]={...r[i],chance:o>s?o:s}})),t.forEach((t=>{r.forEach((({id:e,title:r,chance:i})=>{if(Math.random()<=i){let i=getRandomInt(this.#k,this.#C);this.#A.newOrder(new RetailerOrder({id:e,title:r,amount:i,retailerId:t}))}}))}))};nextStep=()=>{this.#P>0&&this.updateHistory(),this.#s.sendOrder(this.#A),this.#A.newDay(),this.#P=this.#P+1,updateCounter(this.#P,this.#I)};makeOrders=()=>{this.#_(),this.#A.processOrders(),nextBtn.classList.remove("hide"),this.#P==this.#I&&(nextBtn.classList.add("hide"),resultsBtn.classList.remove("hide"))};updateHistory=()=>{this.#E=[...this.#E,{day:this.#P,stat:this.#A.getStatistic(),short:this.#A.getShortStat()}]};calcResult=()=>{this.#E.forEach((({stat:t,short:e})=>{t.forEach((t=>{const{id:e,title:r,orderAmount:i,departuresAmount:s,lossesAmount:o,totalCost:d,profitCost:a,totalLosses:n}=this.#b.stat[t.id-201];this.#b.stat[t.id-201]={id:e,title:r,orderAmount:i+t.orderAmount,departuresAmount:s+t.departuresAmount,lossesAmount:o+t.lossesAmount,totalCost:d+t.totalCost,profitCost:a+t.profitCost,totalLosses:n+t.totalLosses}})),e.forEach((t=>{const{volume:e,profit:r,losses:i,result:s}=this.#b.short[0];this.#b.short=[{volume:e+t.volume,profit:r+t.profit,losses:i+t.losses,result:s+t.result}]}))}))};getCurrentDay=()=>this.#P;getHistory=()=>this.#E;getResult=()=>[this.#b]}nextBtn.classList.add("hide"),nextBtn.addEventListener("click",(()=>{ex.nextStep()})),form.config.addEventListener("change",(t=>readFile(t.target))),form.addEventListener("submit",(t=>{t.preventDefault(),results.classList.add("hide"),resultsBtn.classList.add("hide"),experiment.classList.remove("hide"),days=+form.days.value,productsAmount=+form.productsAmount.value,retailersAmount=+form.retailersAmount.value,minOrder=+form.minOrder.value,maxOrder=+form.maxOrder.value,minDispatchTime=+form.minDispatchTime.value,maxDispatchTime=+form.maxDispatchTime.value,minDispatchTime>maxDispatchTime&&(maxDispatchTime=minDispatchTime,form.maxDispatchTime.value=minDispatchTime),ex=new Experiment({db:db,days:days,retailersAmount:retailersAmount,productsAmount:productsAmount,minOrder:minOrder,maxOrder:maxOrder,minDispatchTime:minDispatchTime,maxDispatchTime:maxDispatchTime}),setup.classList.add("hide")})),getOrdersBtn.addEventListener("click",(()=>{ex.makeOrders()}));const endOfExperement=()=>{slider&&slider.removeActions(),experiment.classList.add("hide"),results.classList.remove("hide"),ex.updateHistory(),ex.calcResult(),drawHistory(historyResult,ex.getResult()),drawHistory(historyByDay,ex.getHistory()),setup.classList.remove("hide"),slider=new Slider(document.querySelector(".slider__container"),document.querySelector(".slider__wrapper"),document.querySelector(".next-slide-btn"),document.querySelector(".prev-slide-btn"))};resultsBtn.addEventListener("click",endOfExperement),rebootBtn.addEventListener("click",(()=>{experiment.classList.add("hide"),setup.classList.remove("hide")})),toEndBtn.addEventListener("click",(()=>{for(nextBtn.classList.contains("hide")&&ex.makeOrders();resultsBtn.classList.contains("hide");)ex.nextStep(),ex.makeOrders();endOfExperement()}));