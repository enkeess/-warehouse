import db from"../data/product-base.json"assert{type:"json"};const getRandomInt=(t,e)=>(t=Math.ceil(t),e=Math.floor(e+1),Math.floor(Math.random()*(e-t))+t),getRandomArray=(t,e,r)=>{let i,s=[];for(;s.length<r;)i=getRandomInt(t,e),-1==s.indexOf(i)&&s.push(i);return s},nextBtn=document.querySelector("#next"),counter=document.querySelector(".counter"),warehouseList=document.querySelector("#warehouse-list"),ordersList=document.querySelector("#orders-list"),departuresList=document.querySelector("#departures-list"),expectedList=document.querySelector("#expected-list"),volume=document.querySelector("#volume"),profitDay=document.querySelector("#profitDay"),losses=document.querySelector("#losses"),profitAll=document.querySelector("#profitAll"),drawTable=(t,e)=>{for(;t.firstChild;)t.firstChild.remove();e.map((t=>{let e=document.createElement("li");e.classList.add("table__line","table__item");for(let r in t){let i=document.createElement("span");i.innerText=t[r],e.append(i)}return e})).forEach((e=>t.append(e)))},drawSpan=(t,e)=>{t.innerText=e},updateUI=t=>{drawTable(ordersList,t.getOrderList()),drawTable(warehouseList,t.getProducts()),drawTable(departuresList,t.getDepartures()),drawTable(expectedList,t.getExpectedDeliveries()),drawSpan(volume,t.getVolume()),drawSpan(profitDay,t.getProfitDay()),drawSpan(losses,t.getLosses()),drawSpan(profitAll,t.getProfitAll())};class Product{#t;#e;#r;constructor(t){const e=dataBase.products.find((e=>e.title==t));this.#t=e.title,this.#r=e.expiryDate,this.#e=e.initialPrice}#i=()=>1;#s(){return this.#e*this.#i()}getTitle=()=>this.#t;getPrice=t=>this.#s()}function Order(t,e){this.id=t,this.amount=e}class Provider{#o=[];newOrder=t=>{this.#o=[...this.#o,{order:t,leadTime:getRandomInt(1,5)}]};sendOrder=t=>{this.#o=this.#o.map((t=>({...t,leadTime:t.leadTime-1})));const e=this.#o.filter((t=>0==t.leadTime));this.#o=this.#o.filter((t=>t.leadTime>0)),e.map((e=>t.getOrder(e.order)))}}class Retailer{#d;#a;constructor({provider:t,id:e}){this.#d=t,this.#a=e}getId=()=>this.#a;makeOrder=t=>{this.#d.newOrder(this,t)}}let products=db.products;const getProductbyId=t=>products.find((e=>e.id==t));class ProductsBase{#n;constructor(t){this.#n=t}getProductbyId=t=>this.#n.find((e=>e.id==t))}class Store{#n;#c;#u=1.2;#d;#l=0;#p=0;#h;#m=0;#y;constructor(t,e){this.#c=new ProductsBase(t.products),this.#n=t.initialStore.map((t=>{let{initialPrice:e}=this.#c.getProductbyId(t.id);return{...t,initialPrice:e,profit:Math.round(100*(this.#u-1)),sale:"-",price:Math.round(e*this.#u)}})),this.#d=e,this.#y=this.#n}#o=[];#g=[];getOrder=t=>{const{id:e,initialPrice:r,expiryDate:i}=this.#c.getProductbyId(t.id);this.#n=[...this.#n,{id:e,amount:t.amount,expiryDate:i,initialPrice:r,profit:Math.round(100*(this.#u-1)),sale:"-",price:Math.round(r*this.#u)}],this.#D=this.#D.map((r=>(console.log(r),r.id==e?{...r,amount:r.amount-t.amount}:r))).filter((t=>t.amount>0))};newOrder=(t,e)=>{console.log(`new order from ID:${t.getId()}`),this.#o=[...this.#o,{retailer:t,order:e}]};newDay=()=>{this.#y=this.#n,this.#g=[],this.#l=0,this.#p=0,this.#o.map((t=>{t.order.map((e=>{this.#f(e,t.retailer.getId())}))})),this.#P(),this.#x(),this.#v(),this.#w(),this.#m=this.#m+this.#p-this.#h};#f=(t,e)=>{let{amount:r}=t;const i=this.getProductbyId(t.id),s=this.getProductExceptById(t.id),o=i.map((i=>{if(r>=i.amount)return this.#g=[...this.#g,{id:t.id,retailer:e,amount:i.amount,price:i.price}],this.#l=this.#l+i.amount*i.price,this.#p=this.#p+i.amount*(i.price-i.initialPrice),r-=i.amount,{...i,amount:0};{r>0&&(this.#g=[...this.#g,{id:t.id,retailer:e,amount:r,price:i.price}],this.#l=this.#l+r*i.price,this.#p=this.#p+r*(i.price-i.initialPrice));let s=i.amount-r;return r=0,{...i,amount:s}}})).filter((t=>t.amount>0));this.#n=[...s,...o]};#P=()=>{this.#n=this.#n.map((t=>({...t,expiryDate:t.expiryDate-1})))};#x=()=>{this.#h=this.#n.filter((t=>0==t.expiryDate)).reduce(((t,{initialPrice:e,amount:r})=>t+e*r),0),this.#n=this.#n.filter((t=>t.expiryDate>0))};#v=()=>{this.#n=this.#n.map((t=>{if(t.expiryDate<3){let{initialPrice:e}=this.#c.getProductbyId(t.id),r=10*t.expiryDate-10;return{...t,sale:r,price:Math.round(e*(1+r/100))}}return t}))};getProductbyId=t=>this.#n.filter((e=>e.id==t));getProductExceptById=t=>this.#n.filter((e=>e.id!=t));sendOrder=(t,e)=>console.log("send order in store");getProducts=()=>this.#y.sort(((t,e)=>t.id<e.id?-1:t.id==e.id?t.expiryDate-e.expiryDate:1));getOrderList=()=>{const t=this.#L(this.#o);return this.#o=[],t};#L=t=>(console.log(t),t.reduce(((t,e)=>[...t,...e.order.map((t=>({id:t.id,retailer:e.retailer.getId(),amount:t.amount})))]),[]));getDepartures=()=>this.#g;getProductAmount=t=>this.getProductbyId(t).reduce(((t,{amount:e})=>t+e),0);#w=()=>{db.config.map((({id:t,min:e,limit:r})=>{const i=e-this.getProductAmount(t),s=this.getExpectedAmount(t);if(i>0){const e=Math.min(i,r-s);e>0&&this.#d.newOrder(new Order(t,e)),this.#D=[...this.#D.filter((e=>e.id!=t)),{id:t,amount:s+e}]}}))};#D=[];getExpectedDeliveries=()=>this.#D.sort(((t,e)=>t.id-e.id));getExpectedAmount=t=>{const e=this.#D.find((e=>e.id==t));return null==e?0:e.amount};getLosses=()=>this.#h;getVolume=()=>this.#l;getProfitDay=()=>this.#p;getProfitAll=()=>this.#m}class Tester{#S=new Store(db);#b=1;#A=30;#I;#O=[new Retailer({provider:this.#S,id:100}),new Retailer({provider:this.#S,id:101}),new Retailer({provider:this.#S,id:102}),new Retailer({provider:this.#S,id:103})];getStore=()=>this.#S;getCurrentDay=()=>this.#b;prevStep=()=>{this.#b>1&&(this.#b=this.#b-1,this.#T())};nextStep=()=>{this.#b<this.#A&&(this.#b=this.#b+1,this.#T())};#T=()=>console.log("update data")}class Tester1{#S;#d=new Provider;#R;#b;#E;#A;#M;#B;constructor(t,e,r,i){this.#E=t,this.#S=new Store(this.#E,this.#d),this.#A=e,this.#M=r,this.#B=i,this.#b=0,this.#R=new Array(r).fill(0).map(((t,e)=>new Retailer({provider:this.#S,id:101+e}))),updateUI(this.#S)}getRetailers=()=>this.#R;nextStep=()=>{this.#q(),this.#d.sendOrder(this.#S),this.#S.newDay(),this.#b=this.#b+1,updateUI(this.#S)};#q=()=>{getRandomArray(0,this.#M-1,getRandomInt(1,this.#M)).forEach((t=>{const e=getRandomArray(201,200+this.#B,getRandomInt(1,5)).map((t=>new Order(t,getRandomInt(10,30))));console.log("order-list: "),console.log(e),this.#R[t].makeOrder(e)}))};getCurrentDay=()=>this.#b}const tester=new Tester1(db,10,5,10);tester.nextStep(),nextBtn.addEventListener("click",(()=>{tester.nextStep(),counter.innerHTML=`${tester.getCurrentDay()} / 10`}));